define([], function(){
//define(['js!modernizr/modernizr.touch.min.js'], function(MODERNIZR){
//'js!modernizr/modernizr.touch.min.js'
	
	function DragBehavior(initialImage, zoomImage, dispatcher){
		this._initialImage = initialImage;
		this._zoomImage = zoomImage;
		this._dispatcher = dispatcher;

		this._lastMouseX = 0;
		this._lastMouseY = 0;
		
		this._state = null;
	}

	DragBehavior.prototype = {
		dragInit:function(){
			if(Modernizr.touch){
				this.attachAllTouchListeners();
			} else {
				this.attachAllDesktopListeners();
			}
		},

		attachAllDesktopListeners:function(){
			var self = this;
			
			//_initialImage
			RICHFX.jQuery(this._dispatcher).bind('mousedown', RICHFX.jQuery.proxy(function(eventObj){
				this.mousedownHandler(eventObj);
			},this));
			
			RICHFX.jQuery(this._dispatcher).bind('mouseup', RICHFX.jQuery.proxy(function(eventObj){
				this.mouseupHandler(eventObj);
			},this));
			
			RICHFX.jQuery(this._dispatcher).bind('mouseout', RICHFX.jQuery.proxy(function(eventObj){
				this.mouseoutHandler(eventObj);
			},this));
		},

		attachAllTouchListeners:function(){
			
			//make touch device stuff happen
			RICHFX.jQuery(this._dispatcher).bind('assetstate.zoom.changed assetstate.pinchzoom.changed', RICHFX.jQuery.proxy(function(eventObj){

				if ( this._state.getZoomLevel() > 0 ) 
				{
					console.log('Binding touchStart - drag');
					RICHFX.jQuery(this._dispatcher).bind('touchstart', RICHFX.jQuery.proxy(function(eventObj){
						this.touchstartHandler(eventObj);
					},this));	
				}
				else
				{
					console.log('UnBinding touchStart - drag');
					RICHFX.jQuery(this._dispatcher).unbind('touchstart');
					RICHFX.jQuery(this._dispatcher).unbind('touchmove');

					
				}
				
			},this));
			
			/*
			RICHFX.jQuery(this._dispatcher).bind('touchmove', RICHFX.jQuery.proxy(function(eventObj){
				this.touchmoveHandler(eventObj);
			},this));
			*/
		},

		mousedownHandler: function(eventObj) {
			eventObj.preventDefault();

			if ( !eventObj.shiftKey )
			{
				this._lastMouseX = eventObj.pageX;
				this._lastMouseY = eventObj.pageY;

				RICHFX.jQuery(this._dispatcher).bind('mousemove', RICHFX.jQuery.proxy(function(event){
					this.mousemoveHandler(event);
				},this));
			}
		},
		
		mousemoveHandler: function(eventObj) {

			var mouseX = eventObj.pageX;
			var mouseY = eventObj.pageY;
	
			var moveLeft = mouseX - this._lastMouseX;
			var moveTop = mouseY - this._lastMouseY;
				
			// update state
			this._state.setPosition((this._state.getX() + moveLeft), (this._state.getY() + moveTop));
			
			this._lastMouseX = mouseX;
			this._lastMouseY = mouseY;
		},
		
		mouseupHandler: function(eventObj) {
			RICHFX.jQuery(this._dispatcher).unbind('mousemove');
		},
		
		mouseoutHandler: function(eventObj) {
			RICHFX.jQuery(this._dispatcher).unbind('mousemove');
		},
		
		touchstartHandler: function(eventObj) {

			var touch = eventObj.originalEvent;
			this._lastMouseX = touch.touches[0].pageX;
			this._lastMouseY = touch.touches[0].pageY;

			RICHFX.jQuery(this._dispatcher).bind('touchmove', RICHFX.jQuery.proxy(function(eventObj){
				this.touchmoveHandler(eventObj);
			},this));
		},
		
		touchmoveHandler: function(eventObj) {
			eventObj.preventDefault();

			var touch = eventObj.originalEvent;

			if ( touch.touches[1] == undefined )
			{
				mouseX = touch.touches[0].pageX;
				mouseY = touch.touches[0].pageY;

				var moveLeft = mouseX - this._lastMouseX;
				var moveTop = mouseY - this._lastMouseY;	
					
				// update state
				this._state.setPosition((this._state.getX() + moveLeft), (this._state.getY() + moveTop));
					
				this._lastMouseX = mouseX;
				this._lastMouseY = mouseY;	
			}
		},
		
		setState: function(assetState) {
			this._state = assetState;
		}

	}

	return DragBehavior;
});
