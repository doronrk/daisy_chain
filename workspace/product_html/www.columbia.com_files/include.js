// Generated by CoffeeScript 1.7.1

/*
Copyright(C) 2013-2014 Mobizcorp Europe Ltd.
All rights reserved.
@license
 */

/**
* include(path[, callback]) -> void
* =================================
* - path (`String`) - the javascript file's path from which it should be loaded (can be either URL or relative path)
* - callback (`Function`) - a callback function that should be executed as soon as the required JS file has been loaded.
*
* This method includes a given JavaScript file. If the given file is loaded already, it won't attempt to load it again.
* If the path is a URL, file will be loaded asynchronously, hence you should use the callback in order to execute
* code that depends on what is being loaded from another server.
* If the to-be-loaded script is located on the same server / requested via a relative path, it will be executed right
* away and all variables and functions exported by it will be available in the global scope.
*
* The include function has a property `env`, which describes in what environment it is executed in. Per default, it's value
* is `"production"`, which means that all scripts will be cached. Any other value will turn the cache off. 
*
* Loading CSS with IncludeJS:
* ---------------------------
* 
* You can load CSS files with include JS. Those will be cached on the client-side the same way
* as is the case for JS files. However, since the styles are loaded asynchronously, if used 
* incorrectly, a flash of content can appear. In order to counteract this, one simple solution
* exists. The following snippet demonstrates the ideal way of using IncludeJS on a Demandware 
* instance:
* 
* ```
* 	<iscomment>to avoid FOC</iscomment>
* 	<style>
* 		body { 
* 			filter: alpha(opacity=0);
* 			opacity: 0;
* 			-webkit-transition: opacity 0.1s linear;
* 			   -moz-transition: opacity 0.1s linear;
* 			    -ms-transition: opacity 0.1s linear;
* 			        transition: opacity 0.1s linear;
* 		}
* 	</style>
* 	<script src="${URLUtils.staticURL('js/include-1.1.0.js').toString().replace(/^http[s]?:\/\/[^\/]+/, '')}" data-env="${dw.system.System.instanceType && 'production'}" data-build="${Resource.msg('revisioninfo.revisionnumber', 'revisioninfo', '') || dw.util.UUIDUtils.createUUID()}"></script>
* 	<script>
* 		// Load actual CSS via IncludeJS
* 		include("../css/page.css");
* 	</script>
* 	<noscript>
* 		<!--  If there is no JS enabled, directly include the styles -->
* 		<link href="${URLUtils.staticURL('css/page.css')}" type="text/css" rel="stylesheet" media="screen"/> 
* 	</noscript>
* ```
*
* Loading JS with IncludeJS:
* --------------------------
* 
* *Example 1:*
* 
* ```
* 	<script src="lib/include.min.js"></script>
* 	<script>
* 		include("lib/jQuery.min.js", function() {
*	 		jQuery('body').append("<hr/>");
* 		});
* 	</script>
* ```
*
* *Example 2:*
* 
* ```
* 	include("//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js", function() {
* 		// jQuery is available in here...
* 		jQuery("body").append("<hr/>");
* 	});
* 	// jQuery won't be available just yet, since it's loaded asynchronously.
* 	// ...
* ```
*
* *Example 3:*
* 
* ```
* 	<script src="lib/include.min.js"></script>
* 	<script>
* 		// set environment to 'development', so that all files are uncached
* 		include.env = "development";
* 		include("mypage.js");
* 	</script>
* ```
* 
* *Example 4:*
* 
* ```
* 	<!-- in some part of the HTML file -->
* 	<script type="lib/include.min.js" data-env="production" data-build="2"></script>
* 	<script>
* 		include("modernizr.js");
* 		include("jquery/jquery-1.9.0.min.js");
* 		include("underscore-min.js");
* 	</script>
* ```
* 
* ```	
* 	// in some JS file that is included from the page
* 	include.ready("modernizr.js", function() {
* 		if (Modernizr.cssAnimations) document.body.className = "animated-load";
* 	});
*   // wait for jquery to load before we can use it
* 	include.ready(["jquery/jquery-1.9.0.min.js", "underscore-min.js"], function() {
* 		$(document).ready(function() {
* 			// we can also use some underscore here...
*			_.debounce(this);
* 			$.load("test/result.cgi");
* 		});
* 	});
* ```
 */
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function(window, document) {
  var JSON, Store, applyStyle, basePath, build, dependableExecute, env, execute, fireReadyCallbacks, init, isOldIE, loadAJAX, loadExternalCSS, script, triggerDependingExecutions, _debug, _executedScripts, _executingScripts, _isReady, _loadedCSS, _loadedScripts, _loadingFiles, _readyCallbacks, _readyFileCallbacks;
  _loadingFiles = [];
  _loadedScripts = [];
  _executedScripts = [];
  _executingScripts = [];
  _readyCallbacks = [];
  _readyFileCallbacks = [];
  _loadedCSS = [];
  _isReady = false;
  if (window.include && include.env) {
    env = include.env;
  }
  if (window.include && include.build) {
    build = include.build;
  }
  basePath = "";
  isOldIE = document.all && !document.addEventListener;
  _debug = function() {
    var e;
    if (env === "production") {
      return;
    }
    try {
      return window.console && console.log(arguments);
    } catch (_error) {
      e = _error;
    }
  };

  /*
  	 *
  	 * JSON FALLBACK FOR IE8
  	 *
   */
  JSON = JSON || {};
  JSON.stringify = JSON.stringify || function(obj) {
    var arr, json, n, t, v;
    t = typeof obj;
    if (t !== "object" || !obj) {
      if (t === "string") {
        obj = "\"" + (obj.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\r?\n/g, '\\n')) + "\"";
      }
      return String(obj);
    } else {
      json = [];
      arr = obj && obj.constructor === Array;
      for (n in obj) {
        v = obj[n];
        t = typeof v;
        if (t === "string") {
          v = "\"" + (v.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\r?\n/g, '\\n')) + "\"";
        } else if (t === "object" && v !== null) {
          v = JSON.stringify(v);
        }
        json.push((arr ? "" : "\"" + n + "\":") + String(v));
      }
      return (arr && "[" || "{") + String(json) + (arr && "]" || "}");
    }
  };
  JSON.parse = JSON.parse || function(str) {
    var e, p;
    if (str === "") {
      str = '""';
    }
    try {
      eval("var p = (" + str + ");");
    } catch (_error) {
      e = _error;
      _debug("Unable to parse " + str + ": " + (e.message || e));
      p = null;
    }
    return p;
  };
  Object.keys = Object.keys || (function() {
    var dontEnums, dontEnumsLength, hasDontEnumBug, hasOwnProperty;
    hasOwnProperty = Object.prototype.hasOwnProperty;
    hasDontEnumBug = !{
      toString: null
    }.propertyIsEnumerable('toString');
    dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
    dontEnumsLength = dontEnums.length;
    return function(obj) {
      var i, prop, result, _i;
      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
        throw new TypeError('Object.keys called on non-object');
      }
      result = [];
      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }
      if (hasDontEnumBug) {
        for (i = _i = 0; 0 <= dontEnumsLength ? _i < dontEnumsLength : _i > dontEnumsLength; i = 0 <= dontEnumsLength ? ++_i : --_i) {
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnums[i]);
          }
        }
      }
      return result;
    };
  })();

  /*
  	 *
  	 * THE STORAGE WRAPPER
  	 *
   */
  Store = (function() {
    var currentMem, init, type;
    currentMem = {};
    type = 0;
    init = function() {
      var detectionError;
      try {
        if (!window.localStorage) {
          throw "detection error";
        }
        localStorage.setItem("--include-js-test--", "test");
        if (localStorage.getItem("--include-js-test--") !== "test") {
          throw "detection error";
        }
        return localStorage.removeItem("--include-js-test--");
      } catch (_error) {
        detectionError = _error;
        type = 1;
        return currentMem = JSON.parse(window.name || "{}") || {};
      }
    };
    init();
    return {
      set: function(key, value) {
        var obj, quota;
        if (type === 0) {
          try {
            localStorage.setItem(key, value);
          } catch (_error) {
            quota = _error;
          }
        } else if (type === 1) {
          obj = currentMem || {};
          obj[key] = value;
          window.name = JSON.stringify(obj);
          currentMem = obj;
        }
        return null;
      },
      get: function(key) {
        if (type === 0) {
          return localStorage.getItem(key);
        } else if (type === 1) {
          return currentMem && currentMem[key] || null;
        }
      },
      clear: function() {
        var e;
        try {
          if (type === 0) {
            localStorage.clear();
          }
        } catch (_error) {
          e = _error;
          "" + e;
        }
        currentMem = {};
        window.name = "";
        return null;
      }
    };
  })();
  (init = function() {
    var script, scripts, _i, _len;
    scripts = document.getElementsByTagName("script");
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (script.src.match(/\binclude(-\d\.\d\.\d)?\.(min\.)?js(?:\?.*)?$/) !== null) {
        env = env || script.getAttribute("data-env") || "production";
        build = build || script.getAttribute("data-build");
        basePath = script.src.replace(/\binclude(-\d\.\d\.\d)?\.(min\.)?js(?:\?.*)?$/ig, '');
        break;
      }
    }
    if (Store.get("includejs-build") !== build) {
      Store.clear();
      return Store.set("includejs-build", build);
    }
  })();
  loadAJAX = function(file, type, callback) {
    var cached, code, request;
    if (type == null) {
      type = "js";
    }
    if (callback == null) {
      callback = function() {};
    }
    cached = JSON.parse(Store.get("include" + type + ":" + ((file.indexOf(basePath) === -1 ? basePath : '') + file)) || "{}");
    code = cached && cached.code;
    if (code && env === "production") {
      _debug("Retrieved " + file + " from cache.");
      return callback(code, file.replace(basePath, ''));
    } else {
      request = new XMLHttpRequest();
      request.open("GET", file, true);
      request.onreadystatechange = function() {
        if (request.readyState === 4) {
          if (request.status < 400) {
            code = request.responseText;
          }
          env === "production" && Store.set("include" + type + ":" + ((file.indexOf(basePath) === -1 ? basePath : '') + file), JSON.stringify({
            code: code,
            stored: build
          }));
          _debug("loaded " + type + " " + file + " from server.");
          return callback(code, file.replace(basePath, ''));
        }
      };
      return request.send();
    }
  };
  loadExternalCSS = function(url, media) {
    var md, uri;
    uri = url;
    md = media;
    return setTimeout(function() {
      var link;
      link = document.createElement("link");
      link.rel = "stylesheet";
      link.media = md;
      link.type = "text/css";
      if (uri) {
        link.href = uri;
      }
      document.getElementsByTagName("head")[0].appendChild(link);
      return _debug("loaded external CSS " + uri + " for " + md + ".");
    }, 10);
  };
  applyStyle = function(code, media, path) {
    var style;
    style = document.createElement("style");
    code = "@media " + media + " {\n" + code + "\n}";
    code = code.replace(/\burl\(([^\)]+)\)/g, function(match, content) {
      return "url(" + (basePath + path.split('/').slice(0, -1).join('/') + '/' + content.replace(/['"]/g, '')) + ")";
    });
    code = ("/* LOADED FROM " + path + " */\n") + code;
    if (style.styleSheet) {
      style.styleSheet.cssText = code;
    } else {
      style.appendChild(document.createTextNode(code));
    }
    return document.getElementsByTagName("head")[0].appendChild(style);
  };
  script = function(url, callback) {
    var uri;
    if (callback == null) {
      callback = function() {};
    }
    uri = url;
    return setTimeout(function() {
      var tag;
      tag = document.createElement("script");
      tag.type = "text/javascript";
      tag.async = "async";
      if (uri) {
        tag.src = uri;
      }
      tag.onload = (function() {
        return setTimeout(function() {
          _debug("Loaded external script " + uri + ". " + (url.replace(basePath, '')) + " - Executing callbacks...");
          return callback(uri.replace(basePath, ''));
        }, 50);
      });
      tag.onerror = function() {
        throw "Unable to load " + uri + ".";
      };
      return document.getElementsByTagName("head")[0].appendChild(tag);
    }, 10);
  };
  execute = function(code, path) {
    var e;
    try {
      (window.execScript || window["eval"])(code);
    } catch (_error) {
      e = _error;
      throw "Unable to execute included file " + path + ": " + (e.message || e) + " (line " + (e.line || 0) + "): " + (e.stack || 'stacktrace not given');
    }
    _executedScripts.push(path);
    triggerDependingExecutions(path);
    return _debug("Executed " + path + ".");
  };
  triggerDependingExecutions = function(path) {
    var all, code, deps, depsFound, each, item, _i, _len, _results;
    _results = [];
    for (all in _executingScripts) {
      deps = all.split("\0");
      depsFound = 0;
      if (__indexOf.call(deps, path) >= 0 || (__indexOf.call((function() {
        var el, _i, _len, _results1;
        _results1 = [];
        for (_i = 0, _len = deps.length; _i < _len; _i++) {
          el = deps[_i];
          _results1.push(new RegExp("\\w+\/" + el + "(?:[_\\.\\d-]+)?(?:[\\._-]min)?(?:[_\\.\\d-]+)?\.js", "g").test(path));
        }
        return _results1;
      })(), true) >= 0)) {
        for (_i = 0, _len = deps.length; _i < _len; _i++) {
          item = deps[_i];
          if (__indexOf.call(_executedScripts, item) >= 0 || (__indexOf.call((function() {
            var el, _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = _executedScripts.length; _j < _len1; _j++) {
              el = _executedScripts[_j];
              _results1.push(new RegExp("\\w+\/" + item + "(?:[_\\.\\d-]+)?(?:[\\._-]min)?(?:[_\\.\\d-]+)?\.js", "g").test(el));
            }
            return _results1;
          })(), true) >= 0)) {
            depsFound++;
          }
        }
      }
      if (depsFound === deps.length) {
        for (each in _executingScripts[all]) {
          code = _executingScripts[all][each];
          delete _executingScripts[all][each];
          execute(code, each);
          fireReadyCallbacks(each);
        }
        if (Object.keys(_executingScripts[all]).length === 0) {
          _results.push(delete _executingScripts[all]);
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  dependableExecute = function(deps, path, code) {
    var all, depsFound, _i, _len;
    if (typeof deps === "string") {
      deps = [deps];
    }
    if (deps.length <= 0) {
      execute(code, path);
      return fireReadyCallbacks(path);
    } else {
      depsFound = 0;
      for (_i = 0, _len = deps.length; _i < _len; _i++) {
        all = deps[_i];
        if (__indexOf.call(_executedScripts, all) >= 0 || (__indexOf.call((function() {
          var el, _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = _executedScripts.length; _j < _len1; _j++) {
            el = _executedScripts[_j];
            _results.push(new RegExp("\\w+\/" + all + "(?:[_\\.\\d-]+)?(?:[\\._-]min)?(?:[_\\.\\d-]+)?\.js", "g").test(el));
          }
          return _results;
        })(), true) >= 0)) {
          depsFound++;
        }
      }
      if (depsFound === deps.length) {
        execute(code, path);
        return fireReadyCallbacks(path);
      } else {
        if (!_executingScripts[deps.join("\0")]) {
          _executingScripts[deps.join("\0")] = [];
        }
        return _executingScripts[deps.join("\0")][path] = code;
      }
    }
  };
  fireReadyCallbacks = function(path) {
    var all, cb, found, item, items, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    if (!_readyFileCallbacks) {
      return;
    }
    for (all in _readyFileCallbacks) {
      items = all.split("\0");
      found = 0;
      if (__indexOf.call(items, path) >= 0 || (__indexOf.call((function() {
        var el, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          el = items[_i];
          _results.push(new RegExp("\\w+\/" + el + "(?:[_\\.\\d-]+)?(?:[\\._-]min)?(?:[_\\.\\d-]+)?\.js", "g").test(path));
        }
        return _results;
      })(), true) >= 0)) {
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (__indexOf.call(_executedScripts, item) >= 0 || (__indexOf.call((function() {
            var el, _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = _executedScripts.length; _j < _len1; _j++) {
              el = _executedScripts[_j];
              _results.push(new RegExp("\\w+\/" + item + "(?:[_\\.\\d-]+)?(?:[\\._-]min)?(?:[_\\.\\d-]+)?\.js", "g").test(el));
            }
            return _results;
          })(), true) >= 0) || item === path) {
            found++;
          }
        }
      }
      if (found === items.length) {
        _ref = _readyFileCallbacks[all];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          cb = _ref[_j];
          if (typeof cb === "function") {
            cb();
          }
        }
        _readyFileCallbacks[all] = [];
      }
    }
    if (_readyFileCallbacks[path]) {
      _ref1 = _readyFileCallbacks[path];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        cb = _ref1[_k];
        if (typeof cb === "function") {
          cb();
        }
      }
      return _readyFileCallbacks[path] = [];
    }
  };
  window.include = function(path, target, callback) {
    var deps, executedCallback, isExternalURL, loadCallback;
    if (callback == null) {
      callback = function() {};
    }
    deps = [];
    isExternalURL = path.match(/^(?:\w+:)?\/\//) || basePath.match(/^(?:\w+:)?\/\//) && basePath.split('/')[2] !== location.host;
    if (path.match(/\.css(?:\?.*)?$/)) {
      if (typeof target !== "string") {
        target = "screen";
      }
      if (__indexOf.call(_loadedCSS, path) >= 0 || __indexOf.call(_loadingFiles, path) >= 0) {
        return;
      }
      _loadingFiles[path] = true;
      if (isOldIE || isExternalURL) {
        loadExternalCSS((!path.match(/^(?:\w+:)?\/\//) ? basePath : "") + path, target);
        _loadedCSS.push(path);
        return delete _loadingFiles[path];
      } else {
        return loadAJAX((path[0] === "/" ? "" : basePath) + path, "css", function(code, path) {
          applyStyle(code, target || "screen", path);
          _loadedCSS.push(path);
          return delete _loadingFiles[path];
        });
      }
    } else {
      if (typeof target !== "function" && target) {
        deps = target;
      } else if (typeof target === "function") {
        callback = target;
      }
      include.ready(path, callback);
      if (__indexOf.call(_loadingFiles, path) >= 0) {
        return;
      }
      _loadingFiles[path] = true;
      loadCallback = function(path) {
        delete _loadingFiles[path];
        return _loadedScripts.push(path);
      };
      executedCallback = function(path) {
        loadCallback(path);
        _executedScripts.push(path);
        return fireReadyCallbacks(path);
      };
      if (isExternalURL) {
        if (!deps) {
          return script((!path.match(/^(?:\w+:)?\/\//) ? basePath : "") + path, executedCallback);
        } else {
          return include.ready(deps, function() {
            return script((!path.match(/^(?:\w+:)?\/\//) ? basePath : "") + path, executedCallback);
          });
        }
      } else {
        return loadAJAX((path[0] === "/" ? "" : basePath) + path, "js", function(code, path) {
          loadCallback(path);
          return dependableExecute(deps, path, code);
        });
      }
    }
  };
  include.ready = function(file, callback) {
    var item, readyToCall, _i, _len;
    if (file == null) {
      file = null;
    }
    if (typeof file === "function") {
      callback = file;
      file = null;
    }
    if (file === null) {
      if (_isReady) {
        return setTimeout(callback, 10);
      } else {
        return _readyCallbacks.push(callback);
      }
    } else {
      readyToCall = true;
      if (typeof file === "string") {
        file = [file];
      }
      for (_i = 0, _len = file.length; _i < _len; _i++) {
        item = file[_i];
        readyToCall = readyToCall && (__indexOf.call(_executedScripts, item) >= 0 || __indexOf.call((function() {
          var el, _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = _executedScripts.length; _j < _len1; _j++) {
            el = _executedScripts[_j];
            _results.push(new RegExp("\\w+\/" + item + "(?:[_\\.\\d-]+)?(?:[\\._-]min)?(?:[_\\.\\d-]+)?\.js", "g").test(el));
          }
          return _results;
        })(), true) >= 0);
      }
      if (readyToCall) {
        return callback();
      } else {
        if (!_readyFileCallbacks[file.join("\0")]) {
          _readyFileCallbacks[file.join("\0")] = [];
        }
        return _readyFileCallbacks[file.join("\0")].push(callback);
      }
    }
  };
  include.fireReady = function() {
    var callback, _i, _len;
    if (!_isReady) {
      _isReady = true;
      for (_i = 0, _len = _readyCallbacks.length; _i < _len; _i++) {
        callback = _readyCallbacks[_i];
        callback();
      }
      return _readyCallbacks = [];
    }
  };
  include.env = env;
  return include.build = build;
})(window, document);
