define({
	
	 zoomBehavior:{
		create:{
			module:'zoom/js/behaviour/ZoomBehavior',
			args:[
				{$ref:'initialImage'},
				{$ref:'zoomImage'},
				{$ref:'dispatcher'},
				{$ref:'zoomType'},
				{$ref:'handlePinchZoom'}
			]
		},
		
		init:{
			zoomInit:{}
		}
	},
	
	dragBehavior:{
		create:{
			module:'zoom/js/behaviour/DragBehavior',
			args:[
				{$ref:'initialImage'},
				{$ref:'zoomImage'},
				{$ref:'dispatcher'}
			]
		},
		
		init:{
			dragInit:{}
		}
	},

	callToAction: {
		create:{
			module:'zoom/js/viewer/CallToAction',
			// dispatcher, height, width, message, ctaImage, effectDuration, visibility
			args:[
				{$ref: 'dispatcher'},
				{$ref: 'initialHeight'},
		       	{$ref: 'initialWidth'},
		       	{$ref: 'ctaText'},
				{$ref: 'initialImage'},
				1000,
				{$ref: 'ctaVisibility'},
		       	{$ref: 'ctaImageID'},
		       	{$ref: 'ctaLeft'},
		       	{$ref: 'ctaTop'}
			]
		},
		init:{
			callToActionInit:{}
		},
		ready:{
			callToActionReady:{}
		}
	},
	
	viewFinder: {
		create:{
			module:'zoom/js/viewer/ViewFinder',
			// dispatcher
			args:[
				{$ref: 'dispatcher'},
				{$ref: 'vfVisibility'}
			]
		},
		init:{
			viewFinderInit:{}
		},
		ready:{
			viewFinderReady:{}
		}
	},
	
	controlBar: {
		create:{
			module:'zoom/js/viewer/ControlBar',
			// dispatcher
			args:[
				{$ref: 'dispatcher'},
				{$ref: 'cbVisibility'},
				{$ref: 'rotation'}
			]
		},
		init:{
			controlBarInit:{}
		},
		ready:{
			controlBarReady:{}
		}
	},
	initialAsset: {
		create: {
			module:'zoom/js/viewer/Asset',

			args: [
			       {$ref: 'initialProxy'},
			       {$ref: 'state'},
			       {$ref: 'product'},
			       {$ref: 'dispatcher'}
			]
		},
		init:{
			assetInit:{}
		},
		ready:{
			assetReady:{}
		}
	},
	zoomProxy: {
		create: {
			module:'zoom/js/viewer/ProxyImage',
			
			args: [
			       "zoom",
			       {$ref: 'zoomPath'},
			       {$ref: 'zoomImage'},
			       {$ref: 'dispatcher'}
			]
		},
		init:{
			proxyImageInit:{}
		},
		ready:{
			proxyImageReady:{}
		}
	},

	state: {
		create: {
			module: 'zoom/js/viewer/AssetState',
			
			args: [
			       {$ref: 'initialHeight'},
			       {$ref: 'initialWidth'},
			       {$ref: 'dispatcher'}
			]
		},
		init: {
			AssetStateInit: {}
		}
	},

	plugins:[
		// Uncomment if cURL debug is required
		//{ module: 'cujo/wire/debug' }
	]
	
});
